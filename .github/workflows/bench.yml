name: bench

permissions:
  contents: read

on:
  push:
    branches:
      - master
    paths-ignore:
      - '.github/workflows/preview.yml'
      - 'assets/**'
      - 'docs/**'
      - 'example/**'
      - 'site/**'
      - '.gitignore'
      - '.node-version'
      - '.npmrc'
      - '.nvmrc'
      - '.prettierignore'
      - '.prettierrc.json'
      - '*.md'
      - 'deno*'
      - 'LICENSE'
      - 'outdated-typescript.d.ts'
  pull_request:
    paths-ignore:
      - '.github/workflows/preview.yml'
      - 'assets/**'
      - 'docs/**'
      - 'example/**'
      - 'site/**'
      - '.gitignore'
      - '.node-version'
      - '.npmrc'
      - '.nvmrc'
      - '.prettierignore'
      - '.prettierrc.json'
      - '*.md'
      - 'deno*'
      - 'LICENSE'
      - 'outdated-typescript.d.ts'
  workflow_dispatch:

jobs:
  typescript:
    name: TypeScript Benchmarks
    permissions:
      pull-requests: write
    runs-on: ubuntu-latest

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # 2.13.0
        with:
          egress-policy: audit

      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # 5.0.0

      - name: Install pnpm
        uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda # 4.1.0

      - name: Use Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # 4.4.0
        with:
          cache: 'pnpm'
          node-version: lts/*

      - name: Install dependencies
        run: pnpm install

      - name: Run benchmarks
        id: bench
        run: |
          # Run the benchmark command and capture its exit code
          summary_output=$(pnpm bench:ts | grep -v "> " | sed '/./,$!d')
          exit_code=$?

          # Set a boolean output indicating if it failed with exit code 1
          if [ $exit_code -eq 1 ]; then
            echo "benchmark_failed=true" >> $GITHUB_OUTPUT
          else
            echo "benchmark_failed=false" >> $GITHUB_OUTPUT
          fi

          echo "full_summary<<EOF" >> $GITHUB_OUTPUT
          echo "$summary_output" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Analyze Results
        id: analyze
        run: |
          full_summary="${{ steps.bench.outputs.full_summary }}"

          # This powerful awk script performs two actions:
          # 1. It finds blocks missing a Delta line and calculates it.
          # 2. It filters for all blocks where the final delta is not zero.
          changed_blocks=$(echo "$full_summary" | awk '
          BEGIN { RS="" } # Process the input in blocks separated by blank lines
          {
            block_text = $0 # Store the original block text
            is_changed = 0

            # If a block is missing a Delta line, calculate it
            if ($0 ~ /Baseline:/ && $0 !~ /Delta:/) {
              # Extract numeric values for Result and Baseline
              match($0, /Result: ([0-9.]+)/, r)
              match($0, /Baseline: ([0-9.]+)/, b)
              
              result_val = r[1]
              baseline_val = b[1]
              
              # Calculate the delta, avoiding division by zero
              if (baseline_val > 0) {
                delta = ((result_val / baseline_val) - 1) * 100
                # Append the newly calculated, formatted Delta line to the block
                block_text = sprintf("%s\nüìä Delta: %+.2f%%", block_text, delta)
              }
            }
            
            # Now, check the (potentially modified) block for a non-zero delta.
            # This works for both pre-existing deltas and the ones we just calculated.
            if (block_text ~ /Delta:/ && block_text !~ /Delta: (\+)?0\.00%/) {
              # Filter out any summary lines that are not part of a benchmark block
              if (block_text ~ /üèåÔ∏è/) {
                print block_text "\n" # Print the complete, changed block
              }
            }
          }')

          if [ -n "$changed_blocks" ]; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "changed_blocks<<EOF" >> $GITHUB_OUTPUT
            echo "$changed_blocks" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
          fi

      - name: PR Comment on Changes
        if: steps.analyze.outputs.has_changes == 'true' && github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork == false
        uses: thollander/actions-comment-pull-request@24bffb9b452ba05a4f3f77933840a6a841d1b32b # 3.0.1
        with:
          comment-tag: typescript-benchmarks
          message: |
            <details>
            <summary>‚è±Ô∏è <strong>Benchmark changes detected</strong> following ${{ github.event.pull_request.head.sha }}</summary>

            The following benchmarks have changed from the baseline:
            ```
            ${{ steps.analyze.outputs.changed_blocks }}
            ```
            </details>

      - name: PR Comment on No Changes
        if: steps.analyze.outputs.has_changes == 'false' && github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork == false
        uses: thollander/actions-comment-pull-request@24bffb9b452ba05a4f3f77933840a6a841d1b32b # 3.0.1
        with:
          comment-tag: typescript-benchmarks
          message: ‚úÖ ‚è±Ô∏è **No benchmark changes detected** following ${{ github.event.pull_request.head.sha }}.

      - name: Fail job if benchmark command failed
        if: steps.bench.outputs.benchmark_failed == 'true'
        run: |
          echo "Benchmark command failed with exit code 1"
          exit 1
